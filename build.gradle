buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge' // Try this some time: apply plugin: 'checkstyle'... well that might not work. But see Buildcraft.

version = new File('fzversion').getText('UTF-8').replaceAll("\\s","")
group = "factorization"
archivesBaseName = "Factorization"

minecraft {
    version = "1.7.10-10.13.2.1230" // FORGEMARK
    assetDir = "eclipse/assets"
    replace '@FZVERSION@', (project.version.split("-")[1])
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
    
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env 
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env 

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

compileJava {
    // Prevents NORELEASE from being compiled
    exclude "factorization/shared/NORELEASE.java"
}

task writeFzFile {
    shouldRunAfter "build"
    doFirst {
        def outName = "build/libs/" + archivesBaseName + "-" + version + ".jar"
        print "\n\n   " + outName + "\n\n"
        def last_fz = new File("last_fz")
        last_fz.delete()
        last_fz << outName
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // replace version and mcversion
        expand 'version':(project.version.split("-")[1]), 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes("FMLCorePlugin": "factorization.coremod.LoadingPlugin",
                   "FMLCorePluginContainsFMLMod": "true")
    }
    exclude "codechicken/**"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
}

// runClient { args "--username" "username" }
// task copySrcJar(type: Copy, dependsOn: "remapJar") {
//     from zipTree("/home/poseidon/.gradle/caches/minecraft/net/minecraftforge/forge/${minecraft.apiVersion}/forgSrc-${minecraft.version}-${minecraft.apiVersion}-sources.jar")
//     exclude "META-INF/**"
//     into "mcSrc"
// }
// tasks.setupDecompWorkspace.dependsOn "copySrcJar"

// task apiJar(type: Jar, dependsOn: 'classes') {
//     from sourceSets.main.allSource, sourceSets.main.output
//     include 'factorization/api/**'
//     classifier = 'api'
// }


// The following two things cause the output of "Factorization-latest.jar"
task latestJar(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.output
    version = "latest"
}
 
reobf {
    reobf latestJar
}
